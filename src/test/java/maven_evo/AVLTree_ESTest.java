/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 17 01:36:52 GMT 2022
 */

package maven_evo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import maven_evo.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      
      int int0 = 1;
      aVLTree0.insert(758);
      aVLTree0.insert((-2521));
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.insert(337);
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(758);
      aVLTree_Node0.height = 1;
      aVLTree_Node0.height = 573;
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(758);
      aVLTree0.insert((-2521));
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.insert(337);
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(758);
      aVLTree_Node0.height = 1;
      aVLTree_Node0.height = (-2521);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(758);
      aVLTree0.insert((-2521));
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.insert(337);
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(758);
      aVLTree_Node0.height = 1;
      aVLTree_Node0.height = 573;
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(758);
      aVLTree0.insert((-2521));
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(758);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.height = 1;
      aVLTree_Node0.height = 573;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(1);
      aVLTree0.height();
      int int0 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(728);
      aVLTree0.insert(758);
      aVLTree0.insert((-2521));
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(758);
      aVLTree_Node0.height = 1;
      aVLTree_Node0.height = 573;
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1915));
      aVLTree0.insert((-964));
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1));
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      aVLTree0.delete(2809);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1));
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete((-1305));
      aVLTree0.delete(0);
      aVLTree0.insert((-1305));
      aVLTree0.delete((-1549));
      aVLTree0.find((-1549));
      aVLTree0.height();
      aVLTree0.find((-1305));
      aVLTree0.delete((-1549));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2112));
      aVLTree0.delete(0);
      aVLTree0.delete(1483);
      aVLTree0.insert((-547));
      aVLTree0.delete((-1033));
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.insert((-1033));
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2189);
      aVLTree0.insert((-2371));
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(2710);
      aVLTree0.insert((-1));
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      int int0 = 0;
      aVLTree0.insert((-718));
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-828));
      aVLTree0.delete((-828));
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1964);
      aVLTree0.delete(1964);
      aVLTree0.insert(1964);
      aVLTree0.insert((-255));
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2238);
      int int0 = 0;
      aVLTree0.insert(0);
      int int1 = 1759;
      aVLTree0.insert(1759);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = (-1853);
      aVLTree0.insert((-1853));
      assertEquals(0, aVLTree0.height());
      
      int int1 = (-982);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-982));
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-982));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = (-982);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0.left;
      assertEquals(1, aVLTree0.height());
      
      int int2 = (-851);
      aVLTree0.insert(int1);
      int int3 = 6358;
      aVLTree0.delete(int3);
      aVLTree0.insert(int2);
      aVLTree0.delete(int0);
      int int4 = aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(int4);
      int int5 = 0;
      aVLTree0.delete(int5);
      aVLTree0.getRoot();
      int int6 = (-1725);
      aVLTree0.delete(int6);
      aVLTree0.height();
      aVLTree0.getRoot();
      int int7 = aVLTree0.height();
      int int8 = 0;
      aVLTree0.delete(int8);
      aVLTree0.delete(int7);
      int int9 = (-949);
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(int9);
      int int10 = (-2284);
      aVLTree_Node2.height = int10;
      aVLTree0.insert(int7);
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.height();
      aVLTree0.height();
      int int11 = 0;
      aVLTree0.delete(int11);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(923);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1085));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = 0;
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals((-1), int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1179));
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertNotNull(aVLTree_Node2);
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2224));
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.find((-1));
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 108;
      aVLTree0.insert(108);
      aVLTree0.delete(108);
      aVLTree0.delete(108);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.insert((-1));
      aVLTree0.delete((-1));
      aVLTree0.height();
      aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1216);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2922));
      aVLTree0.delete((-1006));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.insert(699);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(4495);
      aVLTree0.getRoot();
      aVLTree0.insert((-1835));
      aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1556));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(584);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1918);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2131));
      aVLTree0.delete((-1033));
      aVLTree0.insert((-1033));
      aVLTree0.delete((-1033));
      aVLTree0.insert((-1033));
      aVLTree0.insert(1);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.getRoot();
      aVLTree0.find(0);
      aVLTree0.find((-2131));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(720);
      aVLTree0.insert((-2521));
      aVLTree0.insert(1);
      aVLTree0.insert(371);
      aVLTree0.delete(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(720);
      aVLTree_Node0.height = 1;
      aVLTree_Node0.height = 371;
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.insert(2949);
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert(2949);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("maven_evo.AVLTree", e);
      }
  }
}
